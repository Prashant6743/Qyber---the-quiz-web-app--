{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashantkumar/Downloads/ai-quiz-maker-main/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\n// Use the API key directly for local development\nconst API_KEY = 'AIzaSyC3xokIE3KHWm9AlAKv9qa2bLd0Lczhz4w';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: API_KEY, // Use the direct API key\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEA,iDAAiD;AACjD,MAAM,UAAU;AAET,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ;QACV;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashantkumar/Downloads/ai-quiz-maker-main/src/ai/flows/generate-quiz.ts"],"sourcesContent":["\n// src/ai/flows/generate-quiz.ts\n'use server';\n\n/**\n * @fileOverview Generates a quiz based on the given topic, number of questions, difficulty level, and desired question types.\n *\n * - generateQuiz - A function that handles the quiz generation process.\n * - GenerateQuizInput - The input type for the generateQuiz function.\n * - GenerateQuizOutput - The return type for the generateQuiz function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst QuestionTypeSchema = z.enum([\n  'short-answer',\n  'multiple-choice',\n  'fill-in-the-blank',\n]);\ntype QuestionType = z.infer<typeof QuestionTypeSchema>;\n\nconst GenerateQuizInputSchema = z.object({\n  topic: z.string().describe('The topic of the quiz.'),\n  numQuestions: z.number().int().min(1).max(10).describe('The number of questions in the quiz (1-10).'),\n  difficulty: z\n    .enum(['easy', 'medium', 'hard'])\n    .describe('The difficulty level of the quiz.'),\n  questionType: z\n    .enum(['short-answer', 'multiple-choice', 'fill-in-the-blank', 'mixed'])\n    .describe('The desired type of questions (short-answer, multiple-choice, fill-in-the-blank, or mixed).'),\n});\nexport type GenerateQuizInput = z.infer<typeof GenerateQuizInputSchema>;\n\n\nconst QuizQuestionSchema = z.object({\n      type: QuestionTypeSchema.describe('The type of the question.'),\n      question: z.string().describe('The quiz question text. For fill-in-the-blank, this should contain \"____\" placeholder(s).'),\n      answer: z.string().describe('The correct answer to the question.'),\n      options: z.array(z.string()).optional().describe('An array of possible answer choices (only for multiple-choice questions). The correct answer must be one of the options.'),\n    });\n\nexport type QuizQuestion = z.infer<typeof QuizQuestionSchema>;\n\nconst GenerateQuizOutputSchema = z.object({\n  quiz: z\n    .array(QuizQuestionSchema)\n    .describe('The generated quiz questions, answers, and options (if applicable).'),\n});\nexport type GenerateQuizOutput = z.infer<typeof GenerateQuizOutputSchema>;\n\n\nexport async function generateQuiz(input: GenerateQuizInput): Promise<GenerateQuizOutput> {\n  // Add input validation maybe? Or rely on the flow's schema validation.\n  try {\n    const result = await generateQuizFlow(input);\n    // Add output validation\n    const parsedResult = GenerateQuizOutputSchema.parse(result);\n    return parsedResult;\n  } catch (error) {\n    console.error(\"Error in generateQuiz flow execution or validation:\", error);\n    // Re-throw or handle error appropriately\n    if (error instanceof z.ZodError) {\n      throw new Error(`AI returned invalid data structure: ${error.errors.map(e => e.message).join(', ')}`);\n    }\n    throw error; // Re-throw other errors\n  }\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateQuizPrompt',\n  input: { schema: GenerateQuizInputSchema },\n  output: { schema: GenerateQuizOutputSchema },\n  prompt: `You are an AI quiz generator. Generate a quiz with the following specifications:\n\nTopic: {{{topic}}}\nNumber of Questions: {{{numQuestions}}}\nDifficulty: {{{difficulty}}}\nRequested Question Type: {{{questionType}}}\n\nInstructions:\n1. Generate exactly {{{numQuestions}}} questions.\n2. Adhere to the specified {{{difficulty}}} level.\n3. For each question, determine its type based on the 'Requested Question Type':\n    - If 'short-answer', generate only short-answer questions.\n    - If 'multiple-choice', generate only multiple-choice questions.\n    - If 'fill-in-the-blank', generate only fill-in-the-blank questions.\n    - If 'mixed', generate a variety of question types from short-answer, multiple-choice, and fill-in-the-blank. Try to include at least one of each if possible and the number of questions allows.\n4. Format the output STRICTLY as a JSON object with a \"quiz\" field, which is an array of question objects.\n5. Each question object in the \"quiz\" array MUST have the following fields:\n    - \"type\": (string) The type of question. Must be one of: \"short-answer\", \"multiple-choice\", \"fill-in-the-blank\".\n    - \"question\": (string) The text of the question.\n        - For \"fill-in-the-blank\" questions, use \"____\" (four underscores) to indicate the blank space(s).\n    - \"answer\": (string) The correct answer.\n    - \"options\": (array of strings, OPTIONAL) Include this field ONLY for \"multiple-choice\" questions. It should be an array of strings containing several plausible options, INCLUDING the correct \"answer\". Do NOT include \"options\" for \"short-answer\" or \"fill-in-the-blank\" types.\n\nExample Output Snippet (Mixed):\n{\n  \"quiz\": [\n    {\n      \"type\": \"short-answer\",\n      \"question\": \"What is the capital of France?\",\n      \"answer\": \"Paris\"\n    },\n    {\n      \"type\": \"multiple-choice\",\n      \"question\": \"Which planet is known as the Red Planet?\",\n      \"answer\": \"Mars\",\n      \"options\": [\"Earth\", \"Mars\", \"Jupiter\", \"Venus\"]\n    },\n    {\n      \"type\": \"fill-in-the-blank\",\n      \"question\": \"The formula for water is ____.\",\n      \"answer\": \"H2O\"\n    }\n  ]\n}\n\nGenerate the quiz now based on the user's request. Ensure the output is valid JSON matching the described structure precisely.\n`,\n});\n\nconst generateQuizFlow = ai.defineFlow<typeof GenerateQuizInputSchema, typeof GenerateQuizOutputSchema>(\n  {\n    name: 'generateQuizFlow',\n    inputSchema: GenerateQuizInputSchema,\n    outputSchema: GenerateQuizOutputSchema,\n  },\n  async (input) => {\n     console.log(\"Calling generateQuizFlow with input:\", input);\n    try {\n        const { output } = await prompt(input);\n        console.log(\"Raw AI output:\", JSON.stringify(output, null, 2)); // Log raw output for debugging\n\n        if (!output || !Array.isArray(output.quiz)) {\n             console.error(\"Invalid output structure received from AI:\", output);\n             throw new Error('AI returned an invalid or empty quiz structure.');\n        }\n\n        // Validate each question structure (basic check, Zod parsing is done in the wrapper)\n         output.quiz.forEach((q, index) => {\n            if (!q || typeof q !== 'object') {\n                 console.error(`Invalid item at index ${index}: not an object`, q);\n                 throw new Error(`AI returned an invalid item at index ${index}. Expected an object.`);\n            }\n            if (!q.type || !q.question || !q.answer) {\n                 console.error(`Invalid question object at index ${index}:`, q);\n                 throw new Error(`AI returned an invalid question object at index ${index}. Missing required fields.`);\n            }\n            if (q.type === 'multiple-choice' && (!q.options || !Array.isArray(q.options) || q.options.length < 2 || !q.options.includes(q.answer))) {\n                 console.error(`Invalid multiple-choice question object at index ${index}:`, q);\n                throw new Error(`AI returned an invalid multiple-choice question object at index ${index}. Check options and answer.`);\n            }\n             if (q.type === 'fill-in-the-blank' && !q.question.includes('____')) {\n                  console.warn(`Fill-in-the-blank question at index ${index} might be missing '____':`, q);\n                 // Don't throw error, but warn. AI might format slightly differently.\n             }\n         });\n\n        console.log(\"Validated AI output:\", output);\n        return output; // Output should already conform to GenerateQuizOutputSchema if the prompt worked\n    } catch (error) {\n         console.error(\"Error during AI prompt execution:\", error);\n         throw new Error(`Failed to generate quiz content: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 463, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashantkumar/Downloads/ai-quiz-maker-main/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashantkumar/Downloads/ai-quiz-maker-main/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 491, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}